import { ipcRenderer, contextBridge } from 'electron'

const api = {
  invokeCreateMemdump: async (filename, args) => {
    try {
      await ipcRenderer.invoke('create-memdump', filename, args)
    } catch (error) {
      console.error('Error invoking create-memdump:', error)
      throw error
    }
  },
  processdump: async (filepath) => {
    try {
      await ipcRenderer.invoke('process-dump', filepath)
    } catch (error) {
      console.error('Error process dump:', error)
      throw error
    }
  },
  customfile: async () => {
    try {
      await ipcRenderer.invoke('custom-file')
    } catch (error) {
      console.error('Custom_file error:', error)
      throw error
    }
  },
  testmodel: async () => {
    try {
      return await ipcRenderer.invoke('test-model')
    } catch (error) {
      console.error('Test_model error:', error)
      throw error
    }
  },
  pdfanalyse: async (pdfpath) => {
    try {
      return await ipcRenderer.invoke('pdf-analyse', pdfpath)
    } catch (error) {
      console.error('Test_model error:', error)
      throw error
    }
  },
  capturecap: async (pcappath) => {
    try {
      return await ipcRenderer.invoke('network-capture', pcappath)
    } catch (error) {
      console.error('Test_model error:', error)
      throw error
    }
  }
}

contextBridge.exposeInMainWorld('api', api)
