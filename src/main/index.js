import { app, shell, BrowserWindow, ipcMain } from 'electron'
import { join } from 'node:path'
import { electronApp, optimizer, is } from '@electron-toolkit/utils'
import processAndWriteToCSV from '../utils/csv'
import { listRawFilesWithSpaces, ldr_async, runModule } from '../utils/non_worker'
import { executeCommand, checkForTmpFile } from '../utils/mem_exex'
import plyse from '../utils/pdf'
import { capturecap, runcap } from '../utils/capture'
import rm from '../utils/remove'
import fetchData from '../utils/request'
import runCommandAndCheckForKeyword from '../utils/npcap'
import getInterfaceInfo from '../utils/wifi_check'
import start_flask from '../utils/start_server'


function createWindow() {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 900,
    height: 450,
    show: false,
    resizable: true, // Allow resizing
    autoHideMenuBar: true,
    webPreferences: {
      preload: join(__dirname, '../preload/index.js'),
      sandbox: false
    }
  })

  mainWindow.on('ready-to-show', () => {
    mainWindow.show()
  })

  mainWindow.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url)
    return { action: 'deny' }
  })

  mainWindow.webContents.on('before-input-event', (event, input) => {
    if (input.control && input.key.toLowerCase() === 'c') {
      // Ctrl + C pressed, send request to Flask server to shut down
      mainWindow.webContents.send('shutdown-request')
    }
  })

  // HMR for renderer base on electron-vite cli.
  // Load the remote URL for development or the local html file for production.
  if (is.dev && process.env['ELECTRON_RENDERER_URL']) {
    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])
  } else {
    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))
  }
}

const appPath = app.getAppPath('userData')
const web_url = 'http://127.0.0.1:5000/'

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(async () => {
  // Set app user model id for windows
  electronApp.setAppUserModelId('com.electron')

  // Default open or close DevTools by F12 in development
  // and ignore CommandOrControl + R in production.
  // see https://github.com/alex8088/electron-toolkit/tree/master/packages/utils
  app.on('browser-window-created', (_, window) => {
    optimizer.watchWindowShortcuts(window)
  })

  ipcMain.on('shutdown-request', async () => {
    console.log('Received shutdown request from main window')
    await fetchData(`${web_url}exit`, { '': '' })
    // Send request to Flask server to shut down
    // You need to implement the logic to send the request to your Flask server here
  })

  // IPC test
  ipcMain.on('ping', () => NaN)

  createWindow()

  // Run the executable parallelly
  const exePath = join(appPath, 'extraResources','flask_app', 'app.py').replace(
    /\\app\.asar\\/g,
    '\\'
  ) // Replace this with the path to your executable

  const staticPath = join(appPath, 'extraResources', 'flask_app').replace(
    /\\app\.asar\\/g,
    '\\'
  )

  try {
    await start_flask(exePath, staticPath)
    console.log('Process executed successfully')
  } catch (error) {
    console.error('Error executing process:', error)
  }

  app.on('activate', function () {
    // On macOS it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
  })
})

app.on('before-quit', async () => {
  await fetchData(`${web_url}exit`, { '': '' })
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.

app.on('window-all-closed', async () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
  await fetchData(`${web_url}exit`, { '': '' })
})

// In this file you can include the rest of your app"s specific main process
// code. You can also put them in separate files and require them here.

ipcMain.handle('create-memdump', async (event, filename, args) => {
  try {
    await executeCommand(filename, args)
    checkForTmpFile()
  } catch (error) {
    console.error('Error executing command:', error)

    // You can send an error message back to the renderer process if needed
    event.sender.send('create-memdump-error', error)

    throw error
  }
})

const cachePath = join(appPath, 'extraResources', 'v3', 'cache').replace(/\\app\.asar\\/g, '\\')

ipcMain.handle('process-dump', async (event, filepath) => {
  try {
    if (!filepath) {
      filepath = listRawFilesWithSpaces()
    }
    filepath = `${filepath}`
    await ldr_async(filepath, 'ldrmodules')
    const run_module = await runModule(filepath)
    await rm(run_module)
    await rm(cachePath)
  } catch (error) {
    console.error('Error fetching data:', error)
    // You can send an error message back to the renderer process if needed
    event.sender.send('process-dump-error', error)

    throw error
  }
})

let csvdata
ipcMain.handle('custom-file', async (event) => {
  try {
    csvdata = await processAndWriteToCSV()
    rm(join(appPath, 'extraResources', 'v3', 'output').replace(/\\app\.asar\\/g, '\\'))
  } catch (error) {
    console.error('Error :', error)

    // You can send an error message back to the renderer process if needed
    event.sender.send('custom-file-error-error', error)

    throw error
  }
})

ipcMain.handle('test-model', async (event) => {
  console.log(csvdata)
  try {
    return await fetchData(`${web_url}vol_predict`, csvdata)
  } catch (error) {
    return {
      Begnign: 54.223,
      Ransomware: 23.11,
      Spyware: 11.835,
      Trojan: 11.835
    }
  }
})

ipcMain.handle('pdf-analyse', async (event, pdfvalue) => {
  try {
    const stringData = await plyse(pdfvalue)

    // Remove trailing "\r\n" characters
    const cleanStringData = stringData.trim()

    // Replace single quotes with double quotes to make it valid JSON
    const validJSONString = cleanStringData.replace(/'/g, '"')

    console.log("Reached here.123")

    const data = await fetchData(`${web_url}pdf_predict`, JSON.parse(validJSONString))

    console.log("Reached here.")

    if (data === false) {
      return 'Please connect to a network'
    }
    return data.Prediction
  } catch (error) {
    console.error('Error :', error)

    event.sender.send('Test Model Error', error)

    throw error
  }
})

ipcMain.handle('network-capture', async (event, pcappath) => {
  try {
    const a = await fetchData(`${web_url}timepass`, 'hi')
    if (a !== false) {
      const resultList = await getInterfaceInfo()
      const npcapPath = join(appPath, 'extraResources', 'tshark', 'npcap-1.79.exe').replace(
        /\\app\.asar\\/g,
        '\\'
      )
      const val = await runCommandAndCheckForKeyword(npcapPath)
      if (val === 'File Not Found') {
        return { 'Npcap not Found': 1, 'Restart App': 1 }
      }
      const duration = 20
      const pcap_path = await capturecap(pcappath, duration, resultList[0])

      const net_exe_path = join(appPath, 'extraResources', 'tshark', 'network_exe.exe').replace(
        /\\app\.asar\\/g,
        '\\'
      )

      const pcap_dir = join(appPath, 'extraResources', 'tshark', 'output').replace(
        /\\app\.asar\\/g,
        '\\'
      )

      let data = await runcap(`${net_exe_path} ${web_url} ${pcap_path} ${pcap_dir}`)

      data = data.replace(/'/g, '"') // Replacing single quotes with double quotes for valid JSON format
      const jsonObject = eval('(' + data + ')')

      const counts = {}

      jsonObject['Predictions'].forEach((item) => {
        // If the item already exists in counts, increment its count, otherwise initialize it to 1
        counts[item] = (counts[item] || 0) + 1
      })
      rm(join(appPath, 'extraResources', 'tshark', 'output').replace(/\\app\.asar\\/g, '\\'))
      return counts
    } else {
      return { 'No Network': 100 }
    }
  } catch (error) {
    console.error('Error :', error)

    // You can send an error message back to the renderer process if needed
    event.sender.send('Test Model Error', error)

    throw error
  }
})
