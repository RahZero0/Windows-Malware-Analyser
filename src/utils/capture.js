import { exec } from 'child_process'
import { join } from 'node:path'

const { app } = require('electron')

const runcap = async (command) => {
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        // console.error(`Error: ${error.message}`);
        reject(error.message)
        return
      }
      if (stderr) {
        // console.error(`stderr: ${stderr}`);
        reject(stderr)
        return
      }
      resolve(stdout)
    })
  })
}

const capturecap = async (filepath, duration, network) => {
  const appPath = app.getAppPath('userData')
  const tshark_path = join(appPath, 'extraResources', 'tshark', 'tshark.exe').replace(/\\app\.asar\\/g, '\\')

  const output_path = join(appPath, 'extraResources', 'tshark', 'output').replace(/\\app\.asar\\/g, '\\')
  if (!filepath) {
    try {
      filepath = join(output_path, 'custom.pcap')
      await runcap(`"${tshark_path}" -i ${network} -a duration:${duration} -w "${filepath}"`)
    } catch {
      /* empty */
    }
  }
  try {
    process.chdir(join(appPath, 'extraResources', 'cic_flow', 'bin').replace(/\\app\.asar\\/g, '\\'))
    await runcap(`cfm.bat "${filepath}" "${output_path}"`)
  } catch {
    /* empty */
  }
  return filepath
}

export { capturecap, runcap }
