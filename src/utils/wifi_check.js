const { exec } = require('child_process')

function run_cmd_wifi(command) {
  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        reject(error)
        return
      }
      resolve(stdout.trim())
    })
  })
}

async function getInterfaceInfo() {
  try {
    const stdout = await run_cmd_wifi('netsh interface show interface')

    // Split text output into rows
    const rows = stdout.split('\n')

    // Extract column names from the first row
    const columnNames = rows[0].split(/\s{2,}/)

    // Initialize an array to store lists of columns
    const columnLists = new Array(columnNames.length).fill([])

    // Iterate over rows starting from the second row
    for (let i = 2; i < rows.length; i++) {
      const columns = rows[i].split(/\s{2,}/)
      // Add each column to its corresponding list
      columns.forEach((column, index) => {
        columnLists[index].push(column.trim())
      })
    }

    const parts = []
    const partSize = 4

    for (let i = 0; i < columnLists[0].length; i += partSize) {
      parts.push(columnLists[0].slice(i, i + partSize))
    }

    const resultList = []

    parts.forEach((arr) => {
      if (arr[0] === 'Enabled' && arr[1] === 'Connected') {
        if (arr[3] === 'Wi-Fi') {
          resultList.unshift(arr[3]) // Wi-Fi is added to the beginning
        } else if (arr[3] === 'Ethernet 2' || arr[3] === 'Ethernet') {
          resultList.push('Ethernet') // Ethernet is added to the end
        }
      }
    })

    return resultList
  } catch (error) {
    console.error('Error executing command:', error)
    throw error
  }
}

export default getInterfaceInfo
