import { exec } from 'child_process'
import { readdirSync } from 'fs'
import { join } from 'node:path'
import { listRawFilesWithSpaces } from '../utils/non_worker'

const { app } = require('electron')

function checkForTmpFile() {
  const appPath = app.getAppPath('userData')
  const directoryPath = join(appPath, 'extraResources', 'exec').replace(/\\app\.asar\\/g, '\\')
  const files = readdirSync(directoryPath)
  const tmpFile = files.find((file) => file.endsWith('.tmp'))

  if (tmpFile) {
    // File exists, wait and check again
    console.log(`Waiting for ${tmpFile} to vanish...`)
    setTimeout(() => checkForTmpFile(directoryPath), 1000) // Check again after 1 second
  } else {
    // No file with ".tmp" extension found, proceed to the next part
    console.log(`No .tmp file found. Proceeding to the next part.\n`)
  }
}

function executeCommand(fileName, args) {
  if (listRawFilesWithSpaces()) {
    return new Promise((resolve) => {
      resolve()
      return
    })
  }
  const appPath = app.getAppPath('userData')
  const memfile = join(appPath, 'extraResources', 'exec', fileName).replace(/\\app\.asar\\/g, '\\')
  const command = `"${memfile}" ${args.join(' ')}`
  console.log('command', command)

  return new Promise((resolve, reject) => {
    exec(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`Error: ${error.message}`)
        reject(error.message)
        return
      }
      if (stderr) {
        console.error(`stderr: ${stderr}`)
        reject(stderr)
        return
      }
      resolve()
    })
  })
}

export { executeCommand, checkForTmpFile }
